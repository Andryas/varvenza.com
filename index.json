[{"content":"","date":"1 December 2023","permalink":"/","section":"AW","summary":"","title":"AW"},{"content":"","date":"1 December 2023","permalink":"/tags/docker/","section":"Tags","summary":"","title":"docker"},{"content":"","date":"1 December 2023","permalink":"/tags/r/","section":"Tags","summary":"","title":"r"},{"content":"","date":"1 December 2023","permalink":"/tags/renv/","section":"Tags","summary":"","title":"renv"},{"content":"To be completely transparent, my experience with renv only began last week. This need arose as I\u0026rsquo;ve been juggling multiple Shiny applications, each bundled into their own Docker image. In these images, I meticulously specify each package and its version.\nHowever, I\u0026rsquo;ve hit a snag: my Dockerfiles are growing increasingly unwieldy and complex. That\u0026rsquo;s when I decided to test the waters with renv.\nMy initial week with renv has been largely positive; it\u0026rsquo;s user-friendly and straightforward. But, integrating it into my Docker image building process has been a bit of a challenge.\nFor those curious, this article offers insights into using Docker and renv together. It suggests three strategies, but none perfectly matched my needs:\nInstall all the R packages every time the docker image is generated, which means a lot of time Split your docker image in two parts, one to \u0026ldquo;freeze\u0026rdquo; the package installation, second for your code. Share a volume of your cache to a run-time container. However, I believe there\u0026rsquo;s a 4th, more efficient approach:\nRetrieve packages from the cache when available; otherwise, install them. This way, the lengthy installation process is only a one-time inconvenience. In my quest for a solution, I stumbled upon a stack overflow discussion that addresses a similar issue for Python projects. It turns out that the problem I\u0026rsquo;m facing with R is fundamentally the same.\nLet\u0026rsquo;s build a docker file caching the r packages.\nFirst clone the following repository\nAndryas/docker_renv R 0 0 Second, you just need the Dockerfile and build.sh, all the other files were there only for example.\nNow, in your projet you can setting the renv as usual\nrenv::init() renv::snapshot() and if you want to build your docker image\nbuild.sh Done, it is ready to use and faster then furious. (rsrs)\nScreenshots # Just setting the image with no package installed # bash build.sh 144 seconds, not bad.\nInstalling dplyr # # uncomment the library R/dplyr.R R -e \u0026#34;renv::snapshot()\u0026#34; bash build.sh you can see that everything before stage 11 was cached. And just to install dplyr it took 663 seconds, good 10 minutes.\nNow, if I just update the renv.lock with a new package? how long it is going to take?\nInstalling dplyr + wesanderson # # uncomment the library R/wesanderson.R R -e \u0026#34;renv::snapshot()\u0026#34; bash build.sh 20 seconds!!!!!!!!\nThat\u0026rsquo;s it.\nCheers\n","date":"1 December 2023","permalink":"/posts/docker-renv/","section":"Posts","summary":"To be completely transparent, my experience with renv only began last week.","title":"Speending up your image with renv"},{"content":"","date":"1 December 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"26 November 2023","permalink":"/tags/mongodb/","section":"Tags","summary":"","title":"mongodb"},{"content":"(Backgroud image in this post was generated by chatgpt4)\nAndryas/persistent-data-storage-with-shiny-and-mongodb R 0 0 Creating apps with persistent data storage becomes necessary as you grow as a shiny developer. Without further ado, I will show you a case study.\nImagine the following:\nYou are some kind of gym instructor, and one of our responsibilities is registering new gym clients and tracking their weights over time.\nIn this sense, we need to be able to select a client or create a new one and register their weight as we go.\nBelow the application\nWe can add a new client\nIt\u0026rsquo;ll shows in the selectInput all the clients\nIf we change the gender and the age of one of them, and add some weight data.\nNow if we change the client its update accordingly to their info\nThat\u0026rsquo;s the application, pretty simple and straitght to the point.\nNow, let\u0026rsquo;s divine the logic which allows us to store this data in MongoDB.\nFirst, you need to have a MongoDB. I recommend starting one using docker; see my repository.\nAndryas/aw-localhost My dockercompose to set some services locally Shell 0 0 After initialize a mongo database, download the repository of this post, go to the file server.R and you\u0026rsquo;ll find a piece of code like below.\nThe input$read_client contains the \u0026ldquo;oid\u0026rdquo; of the mongodb which allows us get the data and update all the inputs according to the client information. In other words this piece of code is what \u0026ldquo;restore the client session\u0026rdquo;.\nThe freezeReactiveValue blocks every part where there is a input$gender, input$age or historic_record() to rerun.\n[...] observe({ req(input$read_client) client_info \u0026lt;- conn$iterate( query = stringr::str_interp( \u0026#39;{\u0026#34;_id\u0026#34;: {\u0026#34;$oid\u0026#34;: \u0026#34;${oid}\u0026#34;}}\u0026#39;, list(oid = input$read_client) ), fields = \u0026#39;{}\u0026#39; ) client_info \u0026lt;- client_info$one() shiny::freezeReactiveValue(input, \u0026#34;gender\u0026#34;) updateSelectInput( session = session, input = \u0026#34;gender\u0026#34;, selected = ifelse( is.null(client_info$gender), \u0026#34;male\u0026#34;, client_info$gender ) ) shiny::freezeReactiveValue(input, \u0026#34;age\u0026#34;) shinyWidgets::updateAutonumericInput( session = session, input = \u0026#34;age\u0026#34;, value = ifelse( is.null(client_info$age), 0, client_info$age ) ) historic \u0026lt;- dplyr::bind_rows(client_info$historic) if (nrow(historic) \u0026gt; 0) { historic_record(historic) } else { historic_record(NULL) } client_info(client_info) }) [...] and at the end of the code there is this piece of code, which the comment suggest, save each input every time it changes in the database.\n# ! Persistent storage ---- observe({ req(client_info()) payload \u0026lt;- list( \u0026#34;gender\u0026#34; = input$gender, \u0026#34;age\u0026#34; = input$age, \u0026#34;historic\u0026#34; = historic_record() ) conn$update( stringr::str_interp( \u0026#39;{\u0026#34;_id\u0026#34;: {\u0026#34;$oid\u0026#34;: \u0026#34;${id}\u0026#34;}}\u0026#39;, list(id = client_info()[[\u0026#34;_id\u0026#34;]]) ), jsonlite::toJSON( list(\u0026#34;$set\u0026#34; = payload), auto_unbox = TRUE ) ) }) Cheers\n","date":"26 November 2023","permalink":"/posts/persistent-data-storage-with-shiny-and-mongodb/","section":"Posts","summary":"(Backgroud image in this post was generated by chatgpt4)","title":"Persistent data storage with Shiny and MongoDB"},{"content":"","date":"26 November 2023","permalink":"/tags/shiny/","section":"Tags","summary":"","title":"shiny"},{"content":"","date":"26 November 2023","permalink":"/tags/storage/","section":"Tags","summary":"","title":"storage"},{"content":"Email: Andryaas@gmail.com\nEducation: Bachelor\u0026rsquo;s Degree in Statistics at Federal University of Paraná | 2014 - 2019\nLanguages: Portuguese (primeira), English (fluent), French (débutant), Spanish (entiendo)\nR Python Shiny SQL MongoDB AWS GCP Webscraping Data Wrangling ElasticSearch JavaScript HTML CSS Git Ubuntu Mac Latex Rabbitmq Docker Scrapy Rmarkdown Caret Flask Golem CAPTAL | Data Scientist/Data Enginner 2021/OCT-PRESENT São Paulo, Brazil Responsible for webscraping ecosystem Responsible for the real estate asset origination platform (developed in Shiny) Infrastructure maintainer on GCP and AWS Provide essential data support across various organizational areas, facilitating informed decision-making and strategy development. Collaborate with multiple teams, ensuring that relevant, accurate, and timely data was available for various projects and initiatives Deployed sophisticated statistical models aimed at optimizing property pricing strategies. Utilized advanced analytics and data-driven insights to enhance the accuracy and competitiveness of property pricing, contributing to organizational success and market competitiveness. Gaia | CONSULTANT 2022/MAY-2023-JUL Cidade del Mexico, Mexico Engineered and developed a comprehensive crawler ecosystem specialized for e-commerce platforms, enhancing data extraction and analysis capabilities. Development of forecasting using approachs top-bottom and specifics Support with analytical reports MadeiraMadeira | CONSULTANT 2021/APR-2022-JAN Curitiba, Brazil Revamped the scoring algorithm created by me previously, optimizing the arrangement of product listings to improve user experience and engagement in the website. Improved and maintained the software responsible for managing the scoring algorithm, ensuring its seamless operation and reliability. Provided comprehensive analytical support by generating insightful reports, conducting A/B tests, and measuring the effectiveness of marketing campaigns. Kzas | Data Scientist 2021/APR-2021-SEP São Paulo, Brazil Developed web crawlers for efficient data extraction from various online sources. Established a robust data quality pipeline to ensure the integrity and accuracy of the collected data. Designed and implemented a comprehensive workflow for data enrichment processes. Successfully deployed an Automated Valuation Model (AVM) for accurate property pricing Launched an API for seamless model consumption by external systems. Introduced an interactive tool to enhance user experience and model accessibility MadeiraMadeira | Statistical Analyst 2019/NOV-2021-APR Curitiba, Brazil Deployed a sophisticated forecast model to enhance prediction accuracy across all products. Conducted comprehensive studies to optimize product allocation between marketplaces, ensuring efficient distribution and maximized sales. Undertook text mining studies to garner customer perspectives, aiming to enhance the overall quality of sellers and customer satisfaction. Investigated and identified key gaps in delivery times, working towards optimizing and improving delivery efficiency. Implemented product clustering techniques, bolstering the effectiveness of product recommendations to customers. Introduced a scoring algorithm to optimize product arrangement, enhancing user navigation and product discoverability. Executed the implementation of ETL processes, facilitating accurate and efficient KPI calculations. Developed and conducted experimental A/B tests to evaluate the effectiveness of various marketing campaign strategies, driving optimization efforts. Created a web crawler to assess competitiveness, utilizing Google Shop as a primary data source, to refine and improve market positioning strategies. Bradesco Bank | Statistical Intern 2018/MAR-2019-JUL Curitiba, Brazil Automation of the performance measurement process of default models Support in the development of default models Study of time series of macroeconomic indicators for top management ","date":"18 October 2023","permalink":"/experience/","section":"Work Experience","summary":"Email: Andryaas@gmail.","title":"Work Experience"},{"content":"","date":"13 June 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":" Andryas/aw-shiny R 0 0 A quick shiny tip here.\nLittle context.\nI\u0026rsquo;ve been working with real estate for a while now and I\u0026rsquo;m constantly needing to add search input for address in the applications. I got this awnser here some time ago which I changed in the code below, a shiny module.\nYou just need to add in your .Renviron your google map key to GCP_TOKEN_MAPS or you can just pass the key to the function googlemap_autocomplete_search_ui and googlemap_autocomplete_search_server and voila.\nThe module # googlemap_autocomplete_search.R\ngooglemap_autocomplete_search_ui \u0026lt;- function( id, label = \u0026#34;Type an address\u0026#34;, width = NULL, placeholder = NULL, key = NULL, ... ) { if (is.null(key)) key \u0026lt;- Sys.getenv(\u0026#34;GCP_TOKEN_MAPS\u0026#34;) ns \u0026lt;- NS(id) button \u0026lt;- ns(\u0026#34;button\u0026#34;) jsValue \u0026lt;- ns(\u0026#34;jsValue\u0026#34;) jsValueAddressNumber \u0026lt;- ns(\u0026#34;jsValueAddressNumber\u0026#34;) jsValuePretty \u0026lt;- ns(\u0026#34;jsValuePretty\u0026#34;) jsValueCoords \u0026lt;- ns(\u0026#34;jsValueCoords\u0026#34;) script \u0026lt;- stringr::str_c(\u0026#34; \u0026lt;script\u0026gt; function initAutocomplete() { var autocomplete = new google.maps.places.Autocomplete(document.getElementById(\u0026#39;${button}\u0026#39;),{types: [\u0026#39;geocode\u0026#39;]}); autocomplete.setFields([\u0026#39;address_components\u0026#39;, \u0026#39;formatted_address\u0026#39;, \u0026#39;geometry\u0026#39;, \u0026#39;icon\u0026#39;, \u0026#39;name\u0026#39;]); autocomplete.addListener(\u0026#39;place_changed\u0026#39;, function() { var place = autocomplete.getPlace(); if (!place.geometry) { return; } var addressPretty = place.formatted_address; var address = \u0026#39;\u0026#39;; if (place.address_components) { address = [ (place.address_components[0] \u0026amp;\u0026amp; place.address_components[0].short_name || \u0026#39;\u0026#39;), (place.address_components[1] \u0026amp;\u0026amp; place.address_components[1].short_name || \u0026#39;\u0026#39;), (place.address_components[2] \u0026amp;\u0026amp; place.address_components[2].short_name || \u0026#39;\u0026#39;), (place.address_components[3] \u0026amp;\u0026amp; place.address_components[3].short_name || \u0026#39;\u0026#39;), (place.address_components[4] \u0026amp;\u0026amp; place.address_components[4].short_name || \u0026#39;\u0026#39;), (place.address_components[5] \u0026amp;\u0026amp; place.address_components[5].short_name || \u0026#39;\u0026#39;), (place.address_components[6] \u0026amp;\u0026amp; place.address_components[6].short_name || \u0026#39;\u0026#39;), (place.address_components[7] \u0026amp;\u0026amp; place.address_components[7].short_name || \u0026#39;\u0026#39;) ].join(\u0026#39; \u0026#39;); } var address_number =\u0026#39;\u0026#39; address_number = [(place.address_components[0] \u0026amp;\u0026amp; place.address_components[0].short_name || \u0026#39;\u0026#39;)] var coords = place.geometry.location; //console.log(address); Shiny.onInputChange(\u0026#39;${jsValue}\u0026#39;, address); Shiny.onInputChange(\u0026#39;${jsValueAddressNumber}\u0026#39;, address_number); Shiny.onInputChange(\u0026#39;${jsValuePretty}\u0026#39;, addressPretty); Shiny.onInputChange(\u0026#39;${jsValueCoords}\u0026#39;, coords);});} \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#39;https://maps.googleapis.com/maps/api/js?key=${key}\u0026amp;libraries=places\u0026amp;callback=initAutocomplete\u0026#39; async defer\u0026gt;\u0026lt;/script\u0026gt;\u0026#34; ) shiny::tagList( htmltools::div( id = stringr::str_c(button, \u0026#34;-layout\u0026#34;), shiny::textInput( inputId = button, label = label, width = width, placeholder = placeholder ), htmltools::HTML(stringr::str_interp(script)), ... ) ) } googlemap_autocomplete_search_server \u0026lt;- function(id, key = NULL) { if (is.null(key)) key \u0026lt;- Sys.getenv(\u0026#34;GCP_TOKEN_MAPS\u0026#34;) shiny::moduleServer( id, function(input, output, session) { my_address \u0026lt;- shiny::reactive({ if (!is.null(input$jsValueAddressNumber)) { if ( length(grep(input$jsValueAddressNumber, input$jsValuePretty)) == 0 ) { final_address \u0026lt;- c( input$jsValueAddressNumber, input$jsValuePretty ) } else { final_address \u0026lt;- input$jsValuePretty } return(final_address) } }) address \u0026lt;- reactive({ shiny::req(my_address()) result \u0026lt;- googleway::google_geocode(my_address(), key = key) return(result) }) address } ) } The App # www/custom.css\nbody { height: 100%; width: 100%; } .container-fluid { height: 100vh; display: flex; flex-direction: column; justify-content: center; align-items: center; } .leaflet-container { border-radius: 15px; margin: 27px; } #teste-button-layout { width: 500px; } app.R\nlibrary(shiny) library(shinyjs) source(\u0026#34;googlemap_autocomplete_search.R\u0026#34;) ui \u0026lt;- fluidPage( useShinyjs(), includeCSS(\u0026#34;www/custom.css\u0026#34;), googlemap_autocomplete_search_ui( \u0026#34;teste\u0026#34;, width = \u0026#34;100%\u0026#34;, key = Sys.getenv(\u0026#34;GCP_TOKEN_MAPS\u0026#34;) ), leaflet::leafletOutput(\u0026#34;map\u0026#34;, width = \u0026#34;auto\u0026#34;, height = \u0026#34;auto\u0026#34;) ) server \u0026lt;- function(input, output, session) { address \u0026lt;- googlemap_autocomplete_search_server( \u0026#34;teste\u0026#34;, key = Sys.getenv(\u0026#34;GCP_TOKEN_MAPS\u0026#34;) ) output$map \u0026lt;- leaflet::renderLeaflet({ shiny::req(address()) shinyjs::runjs(\u0026#39;$(\u0026#34;#map\u0026#34;).width(500).height(500);\u0026#39;) leaflet::leaflet() |\u0026gt; leaflet::addTiles() |\u0026gt; leaflet::setView( lng = address()[[\u0026#34;results\u0026#34;]][[\u0026#34;geometry\u0026#34;]][[\u0026#34;location\u0026#34;]][[\u0026#34;lng\u0026#34;]], lat = address()[[\u0026#34;results\u0026#34;]][[\u0026#34;geometry\u0026#34;]][[\u0026#34;location\u0026#34;]][[\u0026#34;lat\u0026#34;]], zoom = 13 ) |\u0026gt; leaflet::addMarkers( lng = address()[[\u0026#34;results\u0026#34;]][[\u0026#34;geometry\u0026#34;]][[\u0026#34;location\u0026#34;]][[\u0026#34;lng\u0026#34;]], lat = address()[[\u0026#34;results\u0026#34;]][[\u0026#34;geometry\u0026#34;]][[\u0026#34;location\u0026#34;]][[\u0026#34;lat\u0026#34;]], popup = \u0026#34;Well done, noble warrior!\u0026#34; ) }) } shinyApp(ui, server) Cheers!\n","date":"5 May 2022","permalink":"/posts/google-autocomplete-address-in-r-shiny/","section":"Posts","summary":"Andryas/aw-shiny R 0 0 A quick shiny tip here.","title":"Google Autocomplete Address in R Shiny"},{"content":"","date":"5 May 2022","permalink":"/tags/googlemaps/","section":"Tags","summary":"","title":"googlemaps"},{"content":"","date":"8 March 2022","permalink":"/about/","section":"About","summary":"","title":"About"},{"content":"","date":"5 March 2022","permalink":"/tags/async/","section":"Tags","summary":"","title":"async"},{"content":" Andryas/shiny-async R 1 0 Greetings earthlings!\nLast week I had a task job to async a part of the code because it was freezing the entire application. For those that don’t know, the Shiny works in a sync way, which means it executes code in sequence, so if you click on one button and it has a long operation, the entire application will wait until the operation ends.\nIf you are reading this, you already know the power and beauty of Shiny, so I won’t spend your time explaining this.\nThe problem # Last week I had a task job to async a part of the code because it was freezing the entire application. For those that don’t know, the Shiny works in a sync way, which means it executes code in sequence, so if you click on one button and it has a long operation, the entire application will wait until the operation ends.\nTo exemplify, I create a simple app with two extensive operations. The data you will find here consists of the distance between pairs of each city in the State of Parana in Brazil, some geographics coordinations and sf things to create maps. And we will be using the idea of Travel Salesman to illustrate. We will calculate all the possible routes between the cities you select, considering that the first one is the origin and seeing which ones have the shortest route.\nSo, what is the idea? You can select a pool of cities, between a minimum of three and a max of seven, that is because less than three, no makes sense, and great than seven will take too much time.\nAfter you choose your cities, a distance matrix between pair of cities will appear and two spinners. The left of the distance matrix is all the possible routes in a DT, the first one is the shortest route, and the second spinner below the distance matrix is a moving plot. The scenario with seven cities will generate 720 plots, 6!, because, remember, the first city is our origin.\nSo, we have two async operations, the first one that generates all possible routes to be taken, and the second one that depends on the previous one to generate all the plots. You’ll see that each element appears in Shiny dependable, so no more freezing problems.\nThe code # Before the comment, if you want to go straight to the code\u0026hellip;\nshiny::runGitHub(\u0026#34;Andryas/shiny-async\u0026#34;) The code can be find here well commented, but I need to highlight a few things. The code below shows part of the server.R, note that I put a NULL at the end of the async blocks inside observer function and created two reactiveVal. The NULL is necessary to create this responsivity because the shiny would follow the sync way without it. And the reactiveVal to allocate the future_promise created.\n# ... # wait for information about the cities selected then apply tsp. observe({ req(tb_cities_distance()) tb \u0026lt;- tb_cities_distance() result_val(NULL) waiter_show( id = \u0026#34;cities_results_spinner\u0026#34;, html = waiter::spin_3(), color = waiter::transparent(.5) ) waiter_show( id = \u0026#34;cities_plot_spinner\u0026#34;, html = waiter::spin_3(), color = waiter::transparent(.5) ) future_promise({ tsp_naivy(tb) }) %...\u0026gt;% result_val() # Return something other than the promise so shiny remains responsive NULL }) # after calculate all the possible routes generate all the possible plots observe({ req(result_val()) d \u0026lt;- result_val() |\u0026gt; arrange(cost) plots \u0026lt;- list() future_promise({ library(sf) for (i in 1:nrow(d)) { map \u0026lt;- d[i, ] map2 \u0026lt;- tibble::as_tibble(tb_map) |\u0026gt; left_join( tibble(name_muni = simplify(strsplit(map$routes, \u0026#34;;\u0026#34;))) |\u0026gt; mutate(direction = 1:n(), fill = \u0026#34;1\u0026#34;), by = \u0026#34;name_muni\u0026#34; ) |\u0026gt; mutate(fill = replace_na(fill, \u0026#34;0\u0026#34;)) p \u0026lt;- map2 |\u0026gt; ggplot() + geom_sf(aes(geometry = geom, fill = fill)) + geom_path( data = map2 |\u0026gt; filter(!is.na(direction)) |\u0026gt; arrange(direction), aes(x = longitude, y = latitude) ) + geom_point( data = map2 |\u0026gt; filter(!is.na(direction) \u0026amp; direction == 1), aes(x = longitude, y = latitude), size = 3 ) + theme_minimal() + theme(legend.position = \u0026#34;none\u0026#34;) + scale_fill_manual(values = c(\u0026#34;#834d29\u0026#34;, \u0026#34;#251ac5\u0026#34;)) + labs(x = \u0026#34;\u0026#34;, y = \u0026#34;\u0026#34;, title = paste0(\u0026#34;Path traveled: \u0026#34;, formatC(map$cost / 1000, format = \u0026#34;f\u0026#34;, big.mark = \u0026#34;,\u0026#34;, digits = 2), \u0026#34; km\u0026#34;)) plots \u0026lt;- append(plots, list(p)) } plots }) %...\u0026gt;% result_plot() # Return something other than the promise so shiny remains responsive NULL }) output$cities_layout_plot \u0026lt;- renderUI({ req(result_plot()) waiter_hide(\u0026#34;cities_plot_spinner\u0026#34;) fluidRow( sliderInput( inputId = \u0026#34;cities_routes_plot\u0026#34;, label = \u0026#34;\u0026#34;, min = 1, max = length(result_plot()), value = 1, step = 1, animate = animationOptions(1000) ) ) }) output$cities_plot \u0026lt;- renderPlot({ req(result_plot(), input$cities_routes_plot) result_plot()[[input$cities_routes_plot]] }) output$cities_distance \u0026lt;- renderDT({ req(tb_cities_distance()) waiter_show( id = \u0026#34;cities_distance\u0026#34;, html = waiter::spin_3(), color = waiter::transparent(.5) ) tb_cities_distance() |\u0026gt; datatable( rownames = FALSE, options = list( dom = \u0026#39;t\u0026#39; ) ) }) # ... Thank you for reading and hasta la vista muchachos.\nTo know more about async things in Shiny Async programming in R and\nLong Runni\u0026hellip; ng Tasks With Shiny: Challenges and Solutions\nAsync programming in R and Shiny\n","date":"5 March 2022","permalink":"/posts/async-programming-in-shiny-plus-spinners/","section":"Posts","summary":"\u003ca id=\"github-0-1701457557963640715\" target=\"_blank\" href=\"https://github.com/Andryas/shiny-async\" class=\"cursor-pointer\"\u003e\n  \u003cdiv\n    class=\"w-full md:w-auto pt-3 p-5 border border-neutral-200 dark:border-neutral-700 border rounded-md backdrop-blur shadow-2xl\"\u003e\n\n    \u003cdiv class=\"flex items-center\"\u003e\n      \u003cspan class=\"text-2xl text-neutral-800 dark:text-neutral\" style=\"margin-right:10px;\"\u003e\n        \n\n  \u003cspan class=\"relative block icon\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 496 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"/\u003e\u003c/svg\u003e\n\n  \u003c/span\u003e\n\n\n      \u003c/span\u003e\n      \u003cdiv\n        id=\"github-0-1701457557963640715-full_name\"\n        class=\"m-0 font-bold text-xl text-neutral-800 decoration-primary-500 hover:underline hover:underline-offset-2 dark:text-neutral\"\u003e\n        Andryas/shiny-async\n      \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cp id=\"github-0-1701457557963640715-description\" class=\"m-0 mt-2 text-md text-neutral-800 dark:text-neutral\"\u003e\n      \n    \u003c/p\u003e\n\n    \u003cdiv class=\"m-0 mt-2 flex items-center\"\u003e\n\n      \u003cspan class=\"mr-1 inline-block h-3 w-3 rounded-full\"\n        style=\"background-color: #198CE7\"\u003e\u003c/span\u003e\n      \u003cdiv class=\"m-0 mr-5 text-md text-neutral-800 dark:text-neutral\"\u003e\n         R \n      \u003c/div\u003e\n\n      \u003cspan class=\"text-md mr-1 text-neutral-800 dark:text-neutral\"\u003e\n        \n\n  \u003cspan class=\"relative block icon\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M287.9 0C297.1 0 305.5 5.25 309.5 13.52L378.1 154.8L531.4 177.5C540.4 178.8 547.8 185.1 550.7 193.7C553.5 202.4 551.2 211.9 544.8 218.2L433.6 328.4L459.9 483.9C461.4 492.9 457.7 502.1 450.2 507.4C442.8 512.7 432.1 513.4 424.9 509.1L287.9 435.9L150.1 509.1C142.9 513.4 133.1 512.7 125.6 507.4C118.2 502.1 114.5 492.9 115.1 483.9L142.2 328.4L31.11 218.2C24.65 211.9 22.36 202.4 25.2 193.7C28.03 185.1 35.5 178.8 44.49 177.5L197.7 154.8L266.3 13.52C270.4 5.249 278.7 0 287.9 0L287.9 0zM287.9 78.95L235.4 187.2C231.9 194.3 225.1 199.3 217.3 200.5L98.98 217.9L184.9 303C190.4 308.5 192.9 316.4 191.6 324.1L171.4 443.7L276.6 387.5C283.7 383.7 292.2 383.7 299.2 387.5L404.4 443.7L384.2 324.1C382.9 316.4 385.5 308.5 391 303L476.9 217.9L358.6 200.5C350.7 199.3 343.9 194.3 340.5 187.2L287.9 78.95z\"/\u003e\u003c/svg\u003e\n  \u003c/span\u003e\n\n\n      \u003c/span\u003e\n      \u003cdiv id=\"github-0-1701457557963640715-stargazers\" class=\"m-0 mr-5 text-md text-neutral-800 dark:text-neutral\"\u003e\n        1\n      \u003c/div\u003e\n\n      \u003cspan class=\"text-md mr-1 text-neutral-800 dark:text-neutral\"\u003e\n        \n\n  \u003cspan class=\"relative block icon\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M80 104c13.3 0 24-10.7 24-24s-10.7-24-24-24S56 66.7 56 80s10.7 24 24 24zm80-24c0 32.8-19.7 61-48 73.3V192c0 17.7 14.3 32 32 32H304c17.7 0 32-14.3 32-32V153.3C307.7 141 288 112.8 288 80c0-44.2 35.8-80 80-80s80 35.8 80 80c0 32.8-19.7 61-48 73.3V192c0 53-43 96-96 96H256v70.7c28.3 12.3 48 40.5 48 73.3c0 44.2-35.8 80-80 80s-80-35.8-80-80c0-32.8 19.7-61 48-73.3V288H144c-53 0-96-43-96-96V153.3C19.7 141 0 112.8 0 80C0 35.8 35.8 0 80 0s80 35.8 80 80zm208 24c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zM248 432c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24z\"/\u003e\u003c/svg\u003e\n  \u003c/span\u003e\n\n\n      \u003c/span\u003e\n      \u003cdiv id=\"github-0-1701457557963640715-forks\" class=\"m-0 mr-5 text-md text-neutral-800 dark:text-neutral\"\u003e\n        0\n      \u003c/div\u003e\n\n    \u003c/div\u003e\n\n  \u003c/div\u003e\n  \u003cscript\u003e\n    fetch(\"https://api.github.com/repos/andryas/shiny-async\", {\n      headers: new Headers({\n        'User-agent': 'Mozilla/4.0 Custom User Agent'\n      })\n    })\n      .then(response =\u003e response.json())\n      .then(data =\u003e {\n        document.getElementById('github-0-1701457557963640715-full_name').innerHTML = data.full_name;\n        document.getElementById('github-0-1701457557963640715-description').innerHTML = data.description;\n        document.getElementById('github-0-1701457557963640715-stargazers').innerHTML = data.stargazers_count;\n        document.getElementById('github-0-1701457557963640715-forks').innerHTML = data.forks;\n      })\n      .catch(error =\u003e console.error(error))\n  \u003c/script\u003e\n\u003c/a\u003e\n\u003cp\u003eGreetings earthlings!\u003c/p\u003e\n\u003cp\u003eLast week I had a task job to async a part of the code because it was freezing the entire application. For those that don’t know, the Shiny works in a sync way, which means it executes code in sequence, so if you click on one button and it has a long operation, the entire application will wait until the operation ends.\u003c/p\u003e\n\u003cp\u003eIf you are reading this, you already know the power and beauty of Shiny, so I won’t spend your time explaining this.\u003c/p\u003e","title":"Async programming in Shiny plus Spinners"},{"content":"","date":"5 March 2022","permalink":"/tags/tsp/","section":"Tags","summary":"","title":"tsp"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]